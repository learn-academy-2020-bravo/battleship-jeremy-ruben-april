{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/battleship-jeremy-ruben-april/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport Messages from './components/Messages';\nimport Battleship from './images/battleship.png';\nimport Torpedo from './images/torpedo.png';\nimport Water from './images/water.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = index => {\n      let {\n        squares,\n        torpIndexes,\n        torpCounter,\n        hitCounter,\n        shipIndexes,\n        sunkShip,\n        missed,\n        done\n      } = this.state; // If the index is that of a ship, the index has not been clicked yet, AND the game is not done\n\n      if (shipIndexes.includes(index) && !torpIndexes.includes(index) && !done) {\n        squares[index] = Battleship;\n        torpIndexes.push(index);\n        hitCounter--;\n        torpCounter--;\n        hitCounter > 0 ? sunkShip = true : sunkShip = false;\n        missed = false;\n      } // If the index has not been clicked yet and the game is not done\n      else if (!torpIndexes.includes(index) && !done) {\n          squares[index] = Torpedo;\n          torpIndexes.push(index);\n          torpCounter--;\n          sunkShip = false;\n          missed = true;\n        } // Set state\n\n\n      this.setState({\n        squares,\n        torpIndexes,\n        torpCounter,\n        hitCounter,\n        sunkShip,\n        missed\n      }); // Change done state to true if win or lose\n\n      if (hitCounter === 0) done = true;else if (torpCounter === 0) {\n        done = true; // After a loss, show all locations of the ships\n\n        shipIndexes.map(index => {\n          return squares[index] = Battleship;\n        });\n      }\n      this.setState({\n        done,\n        squares\n      });\n    };\n\n    this.reset = () => {\n      this.setState({\n        squares: [],\n        torpIndexes: [],\n        shipIndexes: [],\n        torpCounter: 25,\n        hitCounter: 15,\n        sunkShip: false,\n        done: false,\n        missed: false\n      });\n      this.componentDidMount();\n    };\n\n    this.state = {\n      squares: [],\n      // Array holding all indexes that have been clicked\n      torpIndexes: [],\n      // Array holding all random generated ship indexes\n      shipIndexes: [],\n      // Torpedos left\n      torpCounter: 25,\n      // Ships left to destroy\n      hitCounter: 15,\n      // If true, message for sinking ship displays\n      sunkShip: false,\n      // If true, message for missing displays\n      missed: false,\n      // If true, prevents counter and squares from changing after win or lose\n      done: false\n    };\n  }\n\n  componentDidMount() {\n    let squares = []; // Generate 10x10 squares array with all Water images\n\n    for (let i = 0; i < 100; i++) squares.push(Water);\n\n    let shipIndexes = []; // Generate array from 0 to 99\n\n    let gridArray = Array(100).fill().map((x, i) => i); // Generate array holding each column and row\n\n    let grid = [// Columns 0 to 9\n    gridArray.filter(value => value % 10 === 0), gridArray.filter(value => value % 10 === 1), gridArray.filter(value => value % 10 === 2), gridArray.filter(value => value % 10 === 3), gridArray.filter(value => value % 10 === 4), gridArray.filter(value => value % 10 === 5), gridArray.filter(value => value % 10 === 6), gridArray.filter(value => value % 10 === 7), gridArray.filter(value => value % 10 === 8), gridArray.filter(value => value % 10 === 9), // Rows 0 to 9\n    [...gridArray].splice(0, 10), [...gridArray].splice(10, 10), [...gridArray].splice(20, 10), [...gridArray].splice(30, 10), [...gridArray].splice(40, 10), [...gridArray].splice(50, 10), [...gridArray].splice(60, 10), [...gridArray].splice(70, 10), [...gridArray].splice(80, 10), [...gridArray].splice(90, 10)]; // Define these variables\n\n    let fiveNums;\n    let fourNums;\n    let threeNums;\n    let twoNums;\n    let oneNum; // Check to see if a ship is less than the length intended, if so then repeat random number generation\n    // const generateShips = () => {\n    // Generate random index number for grid array\n\n    let randomGridNum1 = Math.floor(Math.random() * 20);\n    let randomGridNum2 = Math.floor(Math.random() * 20);\n    let randomGridNum3 = Math.floor(Math.random() * 20);\n    let randomGridNum4 = Math.floor(Math.random() * 20); // Generate random index number for column/row array\n\n    let randomNum1 = Math.floor(Math.random() * 10);\n    let randomNum2 = Math.floor(Math.random() * 10);\n    let randomNum3 = Math.floor(Math.random() * 10);\n    let randomNum4 = Math.floor(Math.random() * 10); // Generate array for each ship with varying lengths\n\n    fiveNums = [...grid[randomGridNum4]].splice(randomNum4, 5);\n    fourNums = [...grid[randomGridNum1]].splice(randomNum1, 4);\n    threeNums = [...grid[randomGridNum2]].splice(randomNum2, 3);\n    twoNums = [...grid[randomGridNum3]].splice(randomNum3, 2);\n    oneNum = Math.floor(Math.random() * 100); // Check to see if a ship is less than the length intended, if so then repeat random number generation\n\n    while (fiveNums.length < 5) {\n      randomNum4 = Math.floor(Math.random() * 14);\n      fiveNums = [...grid[randomGridNum4]].splice(randomNum4, 5);\n    }\n\n    while (fourNums.length < 4) {\n      randomNum1 = Math.floor(Math.random() * 14);\n      fourNums = [...grid[randomGridNum1]].splice(randomNum1, 4);\n    }\n\n    while (threeNums.length < 3) {\n      randomNum2 = Math.floor(Math.random() * 14);\n      threeNums = [...grid[randomGridNum2]].splice(randomNum2, 3);\n    }\n\n    while (twoNums.length < 2) {\n      randomNum3 = Math.floor(Math.random() * 14);\n      twoNums = [...grid[randomGridNum3]].splice(randomNum3, 2); // }\n      // Push all individual ship indexes into compiled ship index array\n\n      fiveNums.map(index => shipIndexes.push(index));\n      fourNums.map(index => shipIndexes.push(index));\n      threeNums.map(index => shipIndexes.push(index));\n      twoNums.map(index => shipIndexes.push(index));\n      shipIndexes.push(oneNum);\n    } // Check if there are any repeat indexes within ships indexes, if so repeat generateShips function\n    // while (shipIndexes.some((value,index)=>shipIndexes.indexOf(value) !== index)) {\n    //   generateShips()\n    // }\n    // // **UNCOMMENT BELOW to display all ships at start**\n\n\n    fiveNums.map(index => squares[index] = Battleship);\n    fourNums.map(index => squares[index] = Battleship);\n    threeNums.map(index => squares[index] = Battleship);\n    twoNums.map(index => squares[index] = Battleship);\n    squares[oneNum] = Battleship;\n    console.log(shipIndexes); // Set state\n\n    this.setState({\n      squares,\n      shipIndexes\n    });\n  }\n\n  render() {\n    let squares = this.state.squares.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        value: value,\n        index: index,\n        key: index,\n        squares: this.state.squares,\n        handleClick: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }, \"Battleship\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Messages, {\n      hitCounter: this.state.hitCounter,\n      torpCounter: this.state.torpCounter,\n      sunkShip: this.state.sunkShip,\n      missed: this.state.missed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }\n    }, squares), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"stats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }, \"Torpedoes left: \", /*#__PURE__*/React.createElement(\"span\", {\n      className: this.state.torpCounter < 6 ? \"warningFont\" : \"regularFont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 43\n      }\n    }, this.state.torpCounter), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 153\n      }\n    }), \"Battleships to destroy: \", this.state.hitCounter), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"reset\",\n      onClick: this.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, \"Restart\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, \"Developed by Jeremy, Ruben + April\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/battleship-jeremy-ruben-april/src/App.js"],"names":["React","Component","Square","Messages","Battleship","Torpedo","Water","App","constructor","props","handleClick","index","squares","torpIndexes","torpCounter","hitCounter","shipIndexes","sunkShip","missed","done","state","includes","push","setState","map","reset","componentDidMount","i","gridArray","Array","fill","x","grid","filter","value","splice","fiveNums","fourNums","threeNums","twoNums","oneNum","randomGridNum1","Math","floor","random","randomGridNum2","randomGridNum3","randomGridNum4","randomNum1","randomNum2","randomNum3","randomNum4","length","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport Messages from './components/Messages'\nimport Battleship from './images/battleship.png'\nimport Torpedo from './images/torpedo.png'\nimport Water from './images/water.png'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props) {\n    super(props)\n      this.state = {\n        squares: [],\n        // Array holding all indexes that have been clicked\n        torpIndexes: [],\n        // Array holding all random generated ship indexes\n        shipIndexes: [],\n        // Torpedos left\n        torpCounter: 25,\n        // Ships left to destroy\n        hitCounter: 15,\n        // If true, message for sinking ship displays\n        sunkShip: false,\n        // If true, message for missing displays\n        missed: false,\n        // If true, prevents counter and squares from changing after win or lose\n        done: false,\n      }\n  }\n\n  componentDidMount() {\n    let squares = []\n    // Generate 10x10 squares array with all Water images\n    for (let i=0; i<100; i++) squares.push(Water)\n    let shipIndexes = []\n    // Generate array from 0 to 99\n    let gridArray = Array(100).fill().map((x,i)=>i)\n    // Generate array holding each column and row\n    let grid = [\n      // Columns 0 to 9\n      gridArray.filter(value=>value%10===0),\n      gridArray.filter(value=>value%10===1),\n      gridArray.filter(value=>value%10===2),\n      gridArray.filter(value=>value%10===3),\n      gridArray.filter(value=>value%10===4),\n      gridArray.filter(value=>value%10===5),\n      gridArray.filter(value=>value%10===6),\n      gridArray.filter(value=>value%10===7),\n      gridArray.filter(value=>value%10===8),\n      gridArray.filter(value=>value%10===9),\n      // Rows 0 to 9\n      [...gridArray].splice(0,10),\n      [...gridArray].splice(10,10),\n      [...gridArray].splice(20,10),\n      [...gridArray].splice(30,10),\n      [...gridArray].splice(40,10),\n      [...gridArray].splice(50,10),\n      [...gridArray].splice(60,10),\n      [...gridArray].splice(70,10),\n      [...gridArray].splice(80,10),\n      [...gridArray].splice(90,10)\n    ]\n    // Define these variables\n    let fiveNums\n    let fourNums\n    let threeNums\n    let twoNums\n    let oneNum\n    // Check to see if a ship is less than the length intended, if so then repeat random number generation\n    // const generateShips = () => {\n      // Generate random index number for grid array\n      let randomGridNum1 = Math.floor(Math.random() * 20)\n      let randomGridNum2 = Math.floor(Math.random() * 20)\n      let randomGridNum3 = Math.floor(Math.random() * 20)\n      let randomGridNum4 = Math.floor(Math.random() * 20)\n      // Generate random index number for column/row array\n      let randomNum1 = Math.floor(Math.random() * 10)\n      let randomNum2 = Math.floor(Math.random() * 10)\n      let randomNum3 = Math.floor(Math.random() * 10)\n      let randomNum4 = Math.floor(Math.random() * 10)\n      // Generate array for each ship with varying lengths\n      fiveNums = [...grid[randomGridNum4]].splice(randomNum4, 5)\n      fourNums = [...grid[randomGridNum1]].splice(randomNum1, 4)\n      threeNums = [...grid[randomGridNum2]].splice(randomNum2, 3)\n      twoNums = [...grid[randomGridNum3]].splice(randomNum3, 2)\n      oneNum = Math.floor(Math.random() * 100)\n      // Check to see if a ship is less than the length intended, if so then repeat random number generation\n      while(fiveNums.length < 5) {\n        randomNum4 = Math.floor(Math.random() * 14)\n        fiveNums = [...grid[randomGridNum4]].splice(randomNum4, 5)\n      }\n      while(fourNums.length < 4) {\n        randomNum1 = Math.floor(Math.random() * 14)\n        fourNums = [...grid[randomGridNum1]].splice(randomNum1, 4)\n      }\n      while(threeNums.length < 3) {\n        randomNum2 = Math.floor(Math.random() * 14)\n        threeNums = [...grid[randomGridNum2]].splice(randomNum2, 3)\n      }\n      while(twoNums.length < 2) {\n        randomNum3 = Math.floor(Math.random() * 14)\n        twoNums = [...grid[randomGridNum3]].splice(randomNum3, 2)\n      // }\n      // Push all individual ship indexes into compiled ship index array\n      fiveNums.map(index=> shipIndexes.push(index))\n      fourNums.map(index=> shipIndexes.push(index))\n      threeNums.map(index=> shipIndexes.push(index))\n      twoNums.map(index=> shipIndexes.push(index))\n      shipIndexes.push(oneNum)\n    }\n    // Check if there are any repeat indexes within ships indexes, if so repeat generateShips function\n    // while (shipIndexes.some((value,index)=>shipIndexes.indexOf(value) !== index)) {\n    //   generateShips()\n    // }\n    // // **UNCOMMENT BELOW to display all ships at start**\n    fiveNums.map(index=> squares[index] = Battleship)\n    fourNums.map(index=> squares[index] = Battleship)\n    threeNums.map(index=> squares[index] = Battleship)\n    twoNums.map(index=> squares[index] = Battleship)\n    squares[oneNum] = Battleship\n    console.log(shipIndexes)\n    // Set state\n    this.setState({ squares, shipIndexes })\n  }\n\n  handleClick = (index) => {\n    let { squares, torpIndexes, torpCounter, hitCounter, shipIndexes, sunkShip, missed, done } = this.state\n    // If the index is that of a ship, the index has not been clicked yet, AND the game is not done\n    if (shipIndexes.includes(index) && !torpIndexes.includes(index) && !done) {\n      squares[index] = Battleship\n      torpIndexes.push(index)\n      hitCounter--\n      torpCounter--\n      hitCounter > 0 ? sunkShip = true : sunkShip = false\n      missed = false\n    }\n    // If the index has not been clicked yet and the game is not done\n    else if (!torpIndexes.includes(index) && !done) {\n      squares[index] = Torpedo\n      torpIndexes.push(index)\n      torpCounter--\n      sunkShip = false\n      missed = true\n    }\n    // Set state\n    this.setState({ squares, torpIndexes, torpCounter, hitCounter, sunkShip, missed })\n    // Change done state to true if win or lose\n    if (hitCounter === 0) done = true\n    else if (torpCounter === 0) {\n      done = true\n      // After a loss, show all locations of the ships\n      shipIndexes.map(index => {\n        return squares[index] = Battleship\n      })\n    }\n    this.setState({ done, squares})\n  }\n\n  // Reset all state values back to original values, then call componentDidMount\n  reset = () => {\n    this.setState({\n      squares: [],\n      torpIndexes: [],\n      shipIndexes: [],\n      torpCounter: 25,\n      hitCounter: 15,\n      sunkShip: false,\n      done: false,\n      missed: false\n    })\n    this.componentDidMount()\n  }\n\n  render(){\n    let squares = this.state.squares.map((value, index) => {\n      return(\n        <Square\n          value = { value }\n          index = { index }\n          key = { index }\n          squares = { this.state.squares }\n          handleClick = { this.handleClick }\n        />\n      )\n    })\n    return(\n      <>\n        <div id=\"body\">\n          <h1>Battleship</h1>\n          <div id=\"message\">\n            <Messages\n              hitCounter = { this.state.hitCounter}\n              torpCounter = { this.state.torpCounter }\n              sunkShip = { this.state.sunkShip}\n              missed = { this.state.missed }\n            />\n          </div>\n          <div id=\"board\">\n            { squares }\n          </div>\n          {/*Footer Area*/}\n          <div>\n            <p id=\"stats\">Torpedoes left: <span className={this.state.torpCounter < 6 ? \"warningFont\" : \"regularFont\"}>{ this.state.torpCounter }</span><br/>Battleships to destroy: { this.state.hitCounter }</p>\n            <button id=\"reset\" onClick = { this.reset }>Restart</button>\n            <p id=\"footer\">Developed by Jeremy, Ruben + April</p>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}