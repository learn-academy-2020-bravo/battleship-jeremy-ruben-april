{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/battleship-jeremy-ruben-april/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport Messages from './components/Messages';\nimport battleship from './images/battleship.jpg';\nimport torpedo from './images/torpedo.jpg';\nimport water from './images/water.jpg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = index => {\n      let {\n        squares\n      } = this.state;\n      let {\n        torpIndexes\n      } = this.state;\n      let {\n        torpCounter\n      } = this.state;\n      let {\n        hitCounter\n      } = this.state;\n      let {\n        shipIndexes\n      } = this.state;\n      let {\n        sunkShip\n      } = this.state;\n      let {\n        missed\n      } = this.state;\n      let {\n        done\n      } = this.state;\n\n      if (shipIndexes.includes(index) && !torpIndexes.includes(index) && !done) {\n        squares[index] = battleship;\n        torpIndexes.push(index);\n        hitCounter--;\n        torpCounter--;\n        hitCounter > 0 ? sunkShip = true : sunkShip = false;\n        missed = false;\n      } else if (!torpIndexes.includes(index) && !done) {\n        squares[index] = {\n          torpedo\n        };\n        torpIndexes.push(index);\n        torpCounter--;\n        sunkShip = false;\n        missed = true;\n      }\n\n      this.setState({\n        squares,\n        torpIndexes,\n        torpCounter,\n        hitCounter,\n        sunkShip,\n        missed\n      });\n      if (hitCounter === 0) done = true;else if (torpCounter === 0) {\n        done = true;\n        shipIndexes.map(index => {\n          return squares[index] = battleship;\n        });\n      }\n      this.setState({\n        done,\n        squares\n      });\n    };\n\n    this.reset = () => {\n      this.setState({\n        squares: [],\n        torpIndexes: [],\n        shipIndexes: [],\n        torpCounter: 25,\n        hitCounter: 15,\n        sunkShip: false,\n        done: false,\n        missed: false\n      });\n      this.componentDidMount();\n    };\n\n    this.state = {\n      squares: [],\n      torpIndexes: [],\n      shipIndexes: [],\n      torpCounter: 25,\n      hitCounter: 15,\n      sunkShip: false,\n      done: false,\n      missed: false\n    };\n  }\n\n  componentDidMount() {\n    let squares = [];\n\n    for (let i = 0; i < 100; i++) squares.push(water);\n\n    let shipIndexes = [];\n\n    while (shipIndexes.length < 15) {\n      let r = Math.floor(Math.random() * 100);\n      if (shipIndexes.indexOf(r) === -1) shipIndexes.push(r);\n    } // shipIndexes.map(index => {\n    //   return squares[index] = Battleship\n    // })\n\n\n    this.setState({\n      squares: squares,\n      shipIndexes: shipIndexes\n    });\n    console.log(shipIndexes);\n  }\n\n  render() {\n    let squares = this.state.squares.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        index: index,\n        key: index,\n        squares: this.state.squares,\n        handleClick: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"Battleship\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Messages, {\n      hitCounter: this.state.hitCounter,\n      torpCounter: this.state.torpCounter,\n      sunkShip: this.state.sunkShip,\n      missed: this.state.missed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, squares), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"stats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"Torpedoes left: \", this.state.torpCounter, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 69\n      }\n    }), \"Battleships to destroy: \", this.state.hitCounter)), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"reset\",\n      onClick: this.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, \"Restart\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/battleship-jeremy-ruben-april/src/App.js"],"names":["React","Component","Square","Messages","battleship","torpedo","water","App","constructor","props","handleClick","index","squares","state","torpIndexes","torpCounter","hitCounter","shipIndexes","sunkShip","missed","done","includes","push","setState","map","reset","componentDidMount","i","length","r","Math","floor","random","indexOf","console","log","render","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport Messages from './components/Messages'\nimport battleship from './images/battleship.jpg'\nimport torpedo from './images/torpedo.jpg'\nimport water from './images/water.jpg'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props) {\n    super(props)\n      this.state = {\n        squares: [],\n        torpIndexes: [],\n        shipIndexes: [],\n        torpCounter: 25,\n        hitCounter: 15,\n        sunkShip: false,\n        done: false,\n        missed: false\n      }\n  }\n\n  componentDidMount() {\n    let squares = []\n    for (let i=0; i<100; i++) squares.push(water)\n    let shipIndexes = []\n    while(shipIndexes.length < 15){\n      let r = Math.floor(Math.random() * 100)\n      if(shipIndexes.indexOf(r) === -1) shipIndexes.push(r)\n    }\n    // shipIndexes.map(index => {\n    //   return squares[index] = Battleship\n    // })\n    this.setState({\n      squares: squares,\n      shipIndexes: shipIndexes\n    })\n    console.log(shipIndexes)\n  }\n\n  handleClick = (index) => {\n    let { squares } = this.state\n    let { torpIndexes } = this.state\n    let { torpCounter } = this.state\n    let { hitCounter } = this.state\n    let { shipIndexes } = this.state\n    let { sunkShip } = this.state\n    let { missed } = this.state\n    let { done } = this.state\n    if (shipIndexes.includes(index) && !torpIndexes.includes(index) && !done) {\n      squares[index] = battleship\n      torpIndexes.push(index)\n      hitCounter--\n      torpCounter--\n      hitCounter > 0 ? sunkShip = true : sunkShip = false\n      missed = false\n    }\n    else if (!torpIndexes.includes(index) && !done) {\n      squares[index] = { torpedo }\n      torpIndexes.push(index)\n      torpCounter--\n      sunkShip = false\n      missed = true\n    }\n    this.setState({ squares, torpIndexes, torpCounter, hitCounter, sunkShip, missed })\n    if (hitCounter === 0) done = true\n    else if (torpCounter === 0) {\n      done = true\n      shipIndexes.map(index => {\n        return squares[index] = battleship\n      })\n    }\n    this.setState({ done, squares})\n  }\n\n  reset = () => {\n    this.setState({\n      squares: [],\n      torpIndexes: [],\n      shipIndexes: [],\n      torpCounter: 25,\n      hitCounter: 15,\n      sunkShip: false,\n      done: false,\n      missed: false\n    })\n    this.componentDidMount()\n  }\n\n  render(){\n    let squares = this.state.squares.map((value, index) => {\n      return(\n        <Square\n          index = { index }\n          key = { index }\n          squares = { this.state.squares }\n          handleClick = { this.handleClick }\n        />\n      )\n    })\n    return(\n      <>\n        <div id=\"body\">\n          <h1>Battleship</h1>\n          <div id=\"message\">\n            <Messages\n              hitCounter = { this.state.hitCounter}\n              torpCounter = { this.state.torpCounter }\n              sunkShip = { this.state.sunkShip}\n              missed = { this.state.missed }\n            />\n          </div>\n          <div id=\"board\">\n            { squares }\n          </div>\n          <div id=\"footer\">\n            <p id=\"stats\">Torpedoes left: { this.state.torpCounter }<br/>Battleships to destroy: { this.state.hitCounter }</p>\n          </div>\n          <button id=\"reset\" onClick = { this.reset }>Restart</button>\n        </div>\n      </>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}