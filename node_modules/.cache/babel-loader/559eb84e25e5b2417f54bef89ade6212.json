{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/battleship-jeremy-ruben-april/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport Messages from './components/Messages';\nimport Battleship from './images/battleship.png';\nimport Torpedo from './images/torpedo.png';\nimport Water from './images/water.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = index => {\n      let {\n        squares\n      } = this.state;\n      let {\n        torpIndexes\n      } = this.state;\n      let {\n        torpCounter\n      } = this.state;\n      let {\n        hitCounter\n      } = this.state;\n      let {\n        shipIndexes\n      } = this.state;\n      let {\n        sunkShip\n      } = this.state;\n      let {\n        missed\n      } = this.state;\n      let {\n        done\n      } = this.state; // If the index is that of a ship, the index has not been clicked yet, AND the game is not done\n\n      if (shipIndexes.includes(index) && !torpIndexes.includes(index) && !done) {\n        squares[index] = Battleship;\n        torpIndexes.push(index);\n        hitCounter--;\n        torpCounter--;\n        hitCounter > 0 ? sunkShip = true : sunkShip = false;\n        missed = false;\n      } // If the index has not been clicked yet and the game is not done\n      else if (!torpIndexes.includes(index) && !done) {\n          squares[index] = Torpedo;\n          torpIndexes.push(index);\n          torpCounter--;\n          sunkShip = false;\n          missed = true;\n        }\n\n      this.setState({\n        squares,\n        torpIndexes,\n        torpCounter,\n        hitCounter,\n        sunkShip,\n        missed\n      });\n      if (hitCounter === 0) done = true;else if (torpCounter === 0) {\n        done = true; // After a loss, show all locations of the ships\n\n        shipIndexes.map(index => {\n          return squares[index] = Battleship;\n        });\n      }\n      this.setState({\n        done,\n        squares\n      });\n    };\n\n    this.reset = () => {\n      this.setState({\n        squares: [],\n        torpIndexes: [],\n        shipIndexes: [],\n        torpCounter: 25,\n        hitCounter: 15,\n        sunkShip: false,\n        done: false,\n        missed: false\n      });\n      this.componentDidMount();\n    };\n\n    this.state = {\n      squares: [],\n      // Array holding all indexes that have been clicked\n      torpIndexes: [],\n      // Array holding all random generated ship indexes\n      shipIndexes: [],\n      // Torpedos left\n      torpCounter: 25,\n      // Ships left to destroy\n      hitCounter: 15,\n      // If true, message for sinking ship displays\n      sunkShip: false,\n      // If true, message for missing displays\n      missed: false,\n      // If true, prevents counter and squares from changing after win or lose\n      done: false\n    };\n  }\n\n  componentDidMount() {\n    let squares = [];\n\n    for (let i = 0; i < 100; i++) squares.push(Water);\n\n    let shipIndexes = []; // Generate array from 0 to 99\n\n    let gridArray = Array(100).fill().map((x, i) => i); // Generate arrays representing each column or row\n\n    let column0 = gridArray.filter(value => value % 10 === 0);\n    let column1 = gridArray.filter(value => value % 10 === 1);\n    let column2 = gridArray.filter(value => value % 10 === 2);\n    let column3 = gridArray.filter(value => value % 10 === 3);\n    let column4 = gridArray.filter(value => value % 10 === 4);\n    let column5 = gridArray.filter(value => value % 10 === 5);\n    let column6 = gridArray.filter(value => value % 10 === 6);\n    let column7 = gridArray.filter(value => value % 10 === 7);\n    let column8 = gridArray.filter(value => value % 10 === 8);\n    let column9 = gridArray.filter(value => value % 10 === 9);\n    let row0 = [...gridArray].splice(0, 10);\n    let row1 = [...gridArray].splice(10, 10);\n    let row2 = [...gridArray].splice(20, 10);\n    let row3 = [...gridArray].splice(30, 10);\n    let row4 = [...gridArray].splice(40, 10);\n    let row5 = [...gridArray].splice(50, 10);\n    let row6 = [...gridArray].splice(60, 10);\n    let row7 = [...gridArray].splice(70, 10);\n    let row8 = [...gridArray].splice(80, 10);\n    let row9 = [...gridArray].splice(90, 10); // Array with all column and row arrays\n\n    let grid = [column0, column1, column2, column3, column4, column5, column6, column7, column8, column9, row0, row1, row2, row3, row4, row5, row6, row7, row8, row9]; // Generate random index number for grid array\n\n    let randomGridNum1 = Math.floor(Math.random() * 20);\n    let randomGridNum2 = Math.floor(Math.random() * 20);\n    let randomGridNum3 = Math.floor(Math.random() * 20);\n    let randomGridNum4 = Math.floor(Math.random() * 20); // Generate random index number for column/row array\n\n    let randomNum1 = Math.floor(Math.random() * 10);\n    let randomNum2 = Math.floor(Math.random() * 10);\n    let randomNum3 = Math.floor(Math.random() * 10);\n    let randomNum4 = Math.floor(Math.random() * 10); // Generate array for each ship with varying lengths\n\n    let fiveNums = [...grid[randomGridNum4]].splice(randomNum4, 5);\n    let fourNums = [...grid[randomGridNum1]].splice(randomNum1, 4);\n    let threeNums = [...grid[randomGridNum2]].splice(randomNum2, 3);\n    let twoNums = [...grid[randomGridNum3]].splice(randomNum3, 2);\n    let oneNum = Math.floor(Math.random() * 100); // Check to see if a ship is less than the length intended, if so then repeat random number generation\n\n    while (fiveNums.length < 5) {\n      randomNum4 = Math.floor(Math.random() * 14);\n      fiveNums = [...grid[randomGridNum4]].splice(randomNum4, 5);\n    }\n\n    while (fourNums.length < 4) {\n      randomNum1 = Math.floor(Math.random() * 14);\n      fourNums = [...grid[randomGridNum1]].splice(randomNum1, 4);\n    }\n\n    while (threeNums.length < 3) {\n      randomNum2 = Math.floor(Math.random() * 14);\n      threeNums = [...grid[randomGridNum2]].splice(randomNum2, 3);\n    }\n\n    while (twoNums.length < 2) {\n      randomNum3 = Math.floor(Math.random() * 14);\n      twoNums = [...grid[randomGridNum3]].splice(randomNum3, 2);\n    } // **Uncomment below to display all ships at start**\n    // fiveNums.map(index=> squares[index] = Battleship)\n    // fourNums.map(index=> squares[index] = Battleship)\n    // threeNums.map(index=> squares[index] = Battleship)\n    // twoNums.map(index=> squares[index] = Battleship)\n    // squares[oneNum] = Battleship\n    // Push all individual ship indexes into compiled ship index array\n\n\n    fiveNums.map(index => shipIndexes.push(index));\n    fourNums.map(index => shipIndexes.push(index));\n    threeNums.map(index => shipIndexes.push(index));\n    twoNums.map(index => shipIndexes.push(index));\n    shipIndexes.push(oneNum);\n    this.setState({\n      squares,\n      shipIndexes\n    });\n  }\n\n  render() {\n    let squares = this.state.squares.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        value: value,\n        index: index,\n        key: index,\n        squares: this.state.squares,\n        handleClick: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, \"Battleship\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Messages, {\n      hitCounter: this.state.hitCounter,\n      torpCounter: this.state.torpCounter,\n      sunkShip: this.state.sunkShip,\n      missed: this.state.missed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }, squares), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"stats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, \"Torpedoes left: \", /*#__PURE__*/React.createElement(\"span\", {\n      className: this.state.torpCounter < 6 ? \"warningFont\" : \"regularFont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 43\n      }\n    }, this.state.torpCounter), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 153\n      }\n    }), \"Battleships to destroy: \", this.state.hitCounter), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"reset\",\n      onClick: this.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, \"Restart\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, \"Developed by Jeremy, Ruben + April\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/battleship-jeremy-ruben-april/src/App.js"],"names":["React","Component","Square","Messages","Battleship","Torpedo","Water","App","constructor","props","handleClick","index","squares","state","torpIndexes","torpCounter","hitCounter","shipIndexes","sunkShip","missed","done","includes","push","setState","map","reset","componentDidMount","i","gridArray","Array","fill","x","column0","filter","value","column1","column2","column3","column4","column5","column6","column7","column8","column9","row0","splice","row1","row2","row3","row4","row5","row6","row7","row8","row9","grid","randomGridNum1","Math","floor","random","randomGridNum2","randomGridNum3","randomGridNum4","randomNum1","randomNum2","randomNum3","randomNum4","fiveNums","fourNums","threeNums","twoNums","oneNum","length","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA2B;AACzBO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAoGnBC,WApGmB,GAoGJC,KAAD,IAAW;AACvB,UAAI;AAAEC,QAAAA;AAAF,UAAc,KAAKC,KAAvB;AACA,UAAI;AAAEC,QAAAA;AAAF,UAAkB,KAAKD,KAA3B;AACA,UAAI;AAAEE,QAAAA;AAAF,UAAkB,KAAKF,KAA3B;AACA,UAAI;AAAEG,QAAAA;AAAF,UAAiB,KAAKH,KAA1B;AACA,UAAI;AAAEI,QAAAA;AAAF,UAAkB,KAAKJ,KAA3B;AACA,UAAI;AAAEK,QAAAA;AAAF,UAAe,KAAKL,KAAxB;AACA,UAAI;AAAEM,QAAAA;AAAF,UAAa,KAAKN,KAAtB;AACA,UAAI;AAAEO,QAAAA;AAAF,UAAW,KAAKP,KAApB,CARuB,CASvB;;AACA,UAAII,WAAW,CAACI,QAAZ,CAAqBV,KAArB,KAA+B,CAACG,WAAW,CAACO,QAAZ,CAAqBV,KAArB,CAAhC,IAA+D,CAACS,IAApE,EAA0E;AACxER,QAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBP,UAAjB;AACAU,QAAAA,WAAW,CAACQ,IAAZ,CAAiBX,KAAjB;AACAK,QAAAA,UAAU;AACVD,QAAAA,WAAW;AACXC,QAAAA,UAAU,GAAG,CAAb,GAAiBE,QAAQ,GAAG,IAA5B,GAAmCA,QAAQ,GAAG,KAA9C;AACAC,QAAAA,MAAM,GAAG,KAAT;AACD,OAPD,CAQA;AARA,WASK,IAAI,CAACL,WAAW,CAACO,QAAZ,CAAqBV,KAArB,CAAD,IAAgC,CAACS,IAArC,EAA2C;AAC9CR,UAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBN,OAAjB;AACAS,UAAAA,WAAW,CAACQ,IAAZ,CAAiBX,KAAjB;AACAI,UAAAA,WAAW;AACXG,UAAAA,QAAQ,GAAG,KAAX;AACAC,UAAAA,MAAM,GAAG,IAAT;AACD;;AACD,WAAKI,QAAL,CAAc;AAAEX,QAAAA,OAAF;AAAWE,QAAAA,WAAX;AAAwBC,QAAAA,WAAxB;AAAqCC,QAAAA,UAArC;AAAiDE,QAAAA,QAAjD;AAA2DC,QAAAA;AAA3D,OAAd;AACA,UAAIH,UAAU,KAAK,CAAnB,EAAsBI,IAAI,GAAG,IAAP,CAAtB,KACK,IAAIL,WAAW,KAAK,CAApB,EAAuB;AAC1BK,QAAAA,IAAI,GAAG,IAAP,CAD0B,CAE1B;;AACAH,QAAAA,WAAW,CAACO,GAAZ,CAAgBb,KAAK,IAAI;AACvB,iBAAOC,OAAO,CAACD,KAAD,CAAP,GAAiBP,UAAxB;AACD,SAFD;AAGD;AACD,WAAKmB,QAAL,CAAc;AAAEH,QAAAA,IAAF;AAAQR,QAAAA;AAAR,OAAd;AACD,KAxIkB;;AAAA,SA2InBa,KA3ImB,GA2IX,MAAM;AACZ,WAAKF,QAAL,CAAc;AACZX,QAAAA,OAAO,EAAE,EADG;AAEZE,QAAAA,WAAW,EAAE,EAFD;AAGZG,QAAAA,WAAW,EAAE,EAHD;AAIZF,QAAAA,WAAW,EAAE,EAJD;AAKZC,QAAAA,UAAU,EAAE,EALA;AAMZE,QAAAA,QAAQ,EAAE,KANE;AAOZE,QAAAA,IAAI,EAAE,KAPM;AAQZD,QAAAA,MAAM,EAAE;AARI,OAAd;AAUA,WAAKO,iBAAL;AACD,KAvJkB;;AAEf,SAAKb,KAAL,GAAa;AACXD,MAAAA,OAAO,EAAE,EADE;AAEX;AACAE,MAAAA,WAAW,EAAE,EAHF;AAIX;AACAG,MAAAA,WAAW,EAAE,EALF;AAMX;AACAF,MAAAA,WAAW,EAAE,EAPF;AAQX;AACAC,MAAAA,UAAU,EAAE,EATD;AAUX;AACAE,MAAAA,QAAQ,EAAE,KAXC;AAYX;AACAC,MAAAA,MAAM,EAAE,KAbG;AAcX;AACAC,MAAAA,IAAI,EAAE;AAfK,KAAb;AAiBH;;AAEDM,EAAAA,iBAAiB,GAAG;AAClB,QAAId,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIe,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,GAAhB,EAAqBA,CAAC,EAAtB,EAA0Bf,OAAO,CAACU,IAAR,CAAahB,KAAb;;AAC1B,QAAIW,WAAW,GAAG,EAAlB,CAHkB,CAIlB;;AACA,QAAIW,SAAS,GAAGC,KAAK,CAAC,GAAD,CAAL,CAAWC,IAAX,GAAkBN,GAAlB,CAAsB,CAACO,CAAD,EAAGJ,CAAH,KAAOA,CAA7B,CAAhB,CALkB,CAMlB;;AACA,QAAIK,OAAO,GAAGJ,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAIC,OAAO,GAAGP,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAIE,OAAO,GAAGR,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAIG,OAAO,GAAGT,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAII,OAAO,GAAGV,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAIK,OAAO,GAAGX,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAIM,OAAO,GAAGZ,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAIO,OAAO,GAAGb,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAIQ,OAAO,GAAGd,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAIS,OAAO,GAAGf,SAAS,CAACK,MAAV,CAAiBC,KAAK,IAAEA,KAAK,GAAC,EAAN,KAAW,CAAnC,CAAd;AACA,QAAIU,IAAI,GAAG,CAAC,GAAGhB,SAAJ,EAAeiB,MAAf,CAAsB,CAAtB,EAAwB,EAAxB,CAAX;AACA,QAAIC,IAAI,GAAG,CAAC,GAAGlB,SAAJ,EAAeiB,MAAf,CAAsB,EAAtB,EAAyB,EAAzB,CAAX;AACA,QAAIE,IAAI,GAAG,CAAC,GAAGnB,SAAJ,EAAeiB,MAAf,CAAsB,EAAtB,EAAyB,EAAzB,CAAX;AACA,QAAIG,IAAI,GAAG,CAAC,GAAGpB,SAAJ,EAAeiB,MAAf,CAAsB,EAAtB,EAAyB,EAAzB,CAAX;AACA,QAAII,IAAI,GAAG,CAAC,GAAGrB,SAAJ,EAAeiB,MAAf,CAAsB,EAAtB,EAAyB,EAAzB,CAAX;AACA,QAAIK,IAAI,GAAG,CAAC,GAAGtB,SAAJ,EAAeiB,MAAf,CAAsB,EAAtB,EAAyB,EAAzB,CAAX;AACA,QAAIM,IAAI,GAAG,CAAC,GAAGvB,SAAJ,EAAeiB,MAAf,CAAsB,EAAtB,EAAyB,EAAzB,CAAX;AACA,QAAIO,IAAI,GAAG,CAAC,GAAGxB,SAAJ,EAAeiB,MAAf,CAAsB,EAAtB,EAAyB,EAAzB,CAAX;AACA,QAAIQ,IAAI,GAAG,CAAC,GAAGzB,SAAJ,EAAeiB,MAAf,CAAsB,EAAtB,EAAyB,EAAzB,CAAX;AACA,QAAIS,IAAI,GAAG,CAAC,GAAG1B,SAAJ,EAAeiB,MAAf,CAAsB,EAAtB,EAAyB,EAAzB,CAAX,CA1BkB,CA2BlB;;AACA,QAAIU,IAAI,GAAG,CAACvB,OAAD,EAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqCC,OAArC,EAA8CC,OAA9C,EAAuDC,OAAvD,EAAgEC,OAAhE,EAAyEC,OAAzE,EAAkFC,OAAlF,EAA2FC,IAA3F,EAAiGE,IAAjG,EAAuGC,IAAvG,EAA6GC,IAA7G,EAAmHC,IAAnH,EAAyHC,IAAzH,EAA+HC,IAA/H,EAAqIC,IAArI,EAA2IC,IAA3I,EAAiJC,IAAjJ,CAAX,CA5BkB,CA6BlB;;AACA,QAAIE,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAArB;AACA,QAAIC,cAAc,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAArB;AACA,QAAIE,cAAc,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAArB;AACA,QAAIG,cAAc,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAArB,CAjCkB,CAkClB;;AACA,QAAII,UAAU,GAAGN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAjB;AACA,QAAIK,UAAU,GAAGP,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAjB;AACA,QAAIM,UAAU,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAjB;AACA,QAAIO,UAAU,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAjB,CAtCkB,CAuClB;;AACA,QAAIQ,QAAQ,GAAG,CAAC,GAAGZ,IAAI,CAACO,cAAD,CAAR,EAA0BjB,MAA1B,CAAiCqB,UAAjC,EAA6C,CAA7C,CAAf;AACA,QAAIE,QAAQ,GAAG,CAAC,GAAGb,IAAI,CAACC,cAAD,CAAR,EAA0BX,MAA1B,CAAiCkB,UAAjC,EAA6C,CAA7C,CAAf;AACA,QAAIM,SAAS,GAAG,CAAC,GAAGd,IAAI,CAACK,cAAD,CAAR,EAA0Bf,MAA1B,CAAiCmB,UAAjC,EAA6C,CAA7C,CAAhB;AACA,QAAIM,OAAO,GAAG,CAAC,GAAGf,IAAI,CAACM,cAAD,CAAR,EAA0BhB,MAA1B,CAAiCoB,UAAjC,EAA6C,CAA7C,CAAd;AACA,QAAIM,MAAM,GAAGd,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAb,CA5CkB,CA6ClB;;AACA,WAAMQ,QAAQ,CAACK,MAAT,GAAkB,CAAxB,EAA2B;AACzBN,MAAAA,UAAU,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAb;AACAQ,MAAAA,QAAQ,GAAG,CAAC,GAAGZ,IAAI,CAACO,cAAD,CAAR,EAA0BjB,MAA1B,CAAiCqB,UAAjC,EAA6C,CAA7C,CAAX;AACD;;AACD,WAAME,QAAQ,CAACI,MAAT,GAAkB,CAAxB,EAA2B;AACzBT,MAAAA,UAAU,GAAGN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAb;AACAS,MAAAA,QAAQ,GAAG,CAAC,GAAGb,IAAI,CAACC,cAAD,CAAR,EAA0BX,MAA1B,CAAiCkB,UAAjC,EAA6C,CAA7C,CAAX;AACD;;AACD,WAAMM,SAAS,CAACG,MAAV,GAAmB,CAAzB,EAA4B;AAC1BR,MAAAA,UAAU,GAAGP,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAb;AACAU,MAAAA,SAAS,GAAG,CAAC,GAAGd,IAAI,CAACK,cAAD,CAAR,EAA0Bf,MAA1B,CAAiCmB,UAAjC,EAA6C,CAA7C,CAAZ;AACD;;AACD,WAAMM,OAAO,CAACE,MAAR,GAAiB,CAAvB,EAA0B;AACxBP,MAAAA,UAAU,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAb;AACAW,MAAAA,OAAO,GAAG,CAAC,GAAGf,IAAI,CAACM,cAAD,CAAR,EAA0BhB,MAA1B,CAAiCoB,UAAjC,EAA6C,CAA7C,CAAV;AACD,KA7DiB,CA8DlB;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACAE,IAAAA,QAAQ,CAAC3C,GAAT,CAAab,KAAK,IAAGM,WAAW,CAACK,IAAZ,CAAiBX,KAAjB,CAArB;AACAyD,IAAAA,QAAQ,CAAC5C,GAAT,CAAab,KAAK,IAAGM,WAAW,CAACK,IAAZ,CAAiBX,KAAjB,CAArB;AACA0D,IAAAA,SAAS,CAAC7C,GAAV,CAAcb,KAAK,IAAGM,WAAW,CAACK,IAAZ,CAAiBX,KAAjB,CAAtB;AACA2D,IAAAA,OAAO,CAAC9C,GAAR,CAAYb,KAAK,IAAGM,WAAW,CAACK,IAAZ,CAAiBX,KAAjB,CAApB;AACAM,IAAAA,WAAW,CAACK,IAAZ,CAAiBiD,MAAjB;AAEA,SAAKhD,QAAL,CAAc;AAAEX,MAAAA,OAAF;AAAWK,MAAAA;AAAX,KAAd;AACD;;AAuDDwD,EAAAA,MAAM,GAAE;AACN,QAAI7D,OAAO,GAAG,KAAKC,KAAL,CAAWD,OAAX,CAAmBY,GAAnB,CAAuB,CAACU,KAAD,EAAQvB,KAAR,KAAkB;AACrD,0BACE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAKuB,KADZ;AAEE,QAAA,KAAK,EAAKvB,KAFZ;AAGE,QAAA,GAAG,EAAKA,KAHV;AAIE,QAAA,OAAO,EAAK,KAAKE,KAAL,CAAWD,OAJzB;AAKE,QAAA,WAAW,EAAK,KAAKF,WALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD,KAVa,CAAd;AAWA,wBACE,uDACE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AACE,MAAA,UAAU,EAAK,KAAKG,KAAL,CAAWG,UAD5B;AAEE,MAAA,WAAW,EAAK,KAAKH,KAAL,CAAWE,WAF7B;AAGE,MAAA,QAAQ,EAAK,KAAKF,KAAL,CAAWK,QAH1B;AAIE,MAAA,MAAM,EAAK,KAAKL,KAAL,CAAWM,MAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,eAUE;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIP,OADJ,CAVF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,EAAE,EAAC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAA8B;AAAM,MAAA,SAAS,EAAE,KAAKC,KAAL,CAAWE,WAAX,GAAyB,CAAzB,GAA6B,aAA7B,GAA6C,aAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+E,KAAKF,KAAL,CAAWE,WAA1F,CAA9B,eAA4I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5I,8BAA2K,KAAKF,KAAL,CAAWG,UAAtL,CADF,eAEE;AAAQ,MAAA,EAAE,EAAC,OAAX;AAAmB,MAAA,OAAO,EAAK,KAAKS,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,eAGE;AAAG,MAAA,EAAE,EAAC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAHF,CAbF,CADF,CADF;AAuBD;;AA7LwB;;AA+L3B,eAAelB,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport Messages from './components/Messages'\nimport Battleship from './images/battleship.png'\nimport Torpedo from './images/torpedo.png'\nimport Water from './images/water.png'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props) {\n    super(props)\n      this.state = {\n        squares: [],\n        // Array holding all indexes that have been clicked\n        torpIndexes: [],\n        // Array holding all random generated ship indexes\n        shipIndexes: [],\n        // Torpedos left\n        torpCounter: 25,\n        // Ships left to destroy\n        hitCounter: 15,\n        // If true, message for sinking ship displays\n        sunkShip: false,\n        // If true, message for missing displays\n        missed: false,\n        // If true, prevents counter and squares from changing after win or lose\n        done: false,\n      }\n  }\n\n  componentDidMount() {\n    let squares = []\n    for (let i=0; i<100; i++) squares.push(Water)\n    let shipIndexes = []\n    // Generate array from 0 to 99\n    let gridArray = Array(100).fill().map((x,i)=>i)\n    // Generate arrays representing each column or row\n    let column0 = gridArray.filter(value=>value%10===0)\n    let column1 = gridArray.filter(value=>value%10===1)\n    let column2 = gridArray.filter(value=>value%10===2)\n    let column3 = gridArray.filter(value=>value%10===3)\n    let column4 = gridArray.filter(value=>value%10===4)\n    let column5 = gridArray.filter(value=>value%10===5)\n    let column6 = gridArray.filter(value=>value%10===6)\n    let column7 = gridArray.filter(value=>value%10===7)\n    let column8 = gridArray.filter(value=>value%10===8)\n    let column9 = gridArray.filter(value=>value%10===9)\n    let row0 = [...gridArray].splice(0,10)\n    let row1 = [...gridArray].splice(10,10)\n    let row2 = [...gridArray].splice(20,10)\n    let row3 = [...gridArray].splice(30,10)\n    let row4 = [...gridArray].splice(40,10)\n    let row5 = [...gridArray].splice(50,10)\n    let row6 = [...gridArray].splice(60,10)\n    let row7 = [...gridArray].splice(70,10)\n    let row8 = [...gridArray].splice(80,10)\n    let row9 = [...gridArray].splice(90,10)\n    // Array with all column and row arrays\n    let grid = [column0, column1, column2, column3, column4, column5, column6, column7, column8, column9, row0, row1, row2, row3, row4, row5, row6, row7, row8, row9]\n    // Generate random index number for grid array\n    let randomGridNum1 = Math.floor(Math.random() * 20)\n    let randomGridNum2 = Math.floor(Math.random() * 20)\n    let randomGridNum3 = Math.floor(Math.random() * 20)\n    let randomGridNum4 = Math.floor(Math.random() * 20)\n    // Generate random index number for column/row array\n    let randomNum1 = Math.floor(Math.random() * 10)\n    let randomNum2 = Math.floor(Math.random() * 10)\n    let randomNum3 = Math.floor(Math.random() * 10)\n    let randomNum4 = Math.floor(Math.random() * 10)\n    // Generate array for each ship with varying lengths\n    let fiveNums = [...grid[randomGridNum4]].splice(randomNum4, 5)\n    let fourNums = [...grid[randomGridNum1]].splice(randomNum1, 4)\n    let threeNums = [...grid[randomGridNum2]].splice(randomNum2, 3)\n    let twoNums = [...grid[randomGridNum3]].splice(randomNum3, 2)\n    let oneNum = Math.floor(Math.random() * 100)\n    // Check to see if a ship is less than the length intended, if so then repeat random number generation\n    while(fiveNums.length < 5) {\n      randomNum4 = Math.floor(Math.random() * 14)\n      fiveNums = [...grid[randomGridNum4]].splice(randomNum4, 5)\n    }\n    while(fourNums.length < 4) {\n      randomNum1 = Math.floor(Math.random() * 14)\n      fourNums = [...grid[randomGridNum1]].splice(randomNum1, 4)\n    }\n    while(threeNums.length < 3) {\n      randomNum2 = Math.floor(Math.random() * 14)\n      threeNums = [...grid[randomGridNum2]].splice(randomNum2, 3)\n    }\n    while(twoNums.length < 2) {\n      randomNum3 = Math.floor(Math.random() * 14)\n      twoNums = [...grid[randomGridNum3]].splice(randomNum3, 2)\n    }\n    // **Uncomment below to display all ships at start**\n    // fiveNums.map(index=> squares[index] = Battleship)\n    // fourNums.map(index=> squares[index] = Battleship)\n    // threeNums.map(index=> squares[index] = Battleship)\n    // twoNums.map(index=> squares[index] = Battleship)\n    // squares[oneNum] = Battleship\n\n    // Push all individual ship indexes into compiled ship index array\n    fiveNums.map(index=> shipIndexes.push(index))\n    fourNums.map(index=> shipIndexes.push(index))\n    threeNums.map(index=> shipIndexes.push(index))\n    twoNums.map(index=> shipIndexes.push(index))\n    shipIndexes.push(oneNum)\n\n    this.setState({ squares, shipIndexes })\n  }\n\n  handleClick = (index) => {\n    let { squares } = this.state\n    let { torpIndexes } = this.state\n    let { torpCounter } = this.state\n    let { hitCounter } = this.state\n    let { shipIndexes } = this.state\n    let { sunkShip } = this.state\n    let { missed } = this.state\n    let { done } = this.state\n    // If the index is that of a ship, the index has not been clicked yet, AND the game is not done\n    if (shipIndexes.includes(index) && !torpIndexes.includes(index) && !done) {\n      squares[index] = Battleship\n      torpIndexes.push(index)\n      hitCounter--\n      torpCounter--\n      hitCounter > 0 ? sunkShip = true : sunkShip = false\n      missed = false\n    }\n    // If the index has not been clicked yet and the game is not done\n    else if (!torpIndexes.includes(index) && !done) {\n      squares[index] = Torpedo\n      torpIndexes.push(index)\n      torpCounter--\n      sunkShip = false\n      missed = true\n    }\n    this.setState({ squares, torpIndexes, torpCounter, hitCounter, sunkShip, missed })\n    if (hitCounter === 0) done = true\n    else if (torpCounter === 0) {\n      done = true\n      // After a loss, show all locations of the ships\n      shipIndexes.map(index => {\n        return squares[index] = Battleship\n      })\n    }\n    this.setState({ done, squares})\n  }\n\n  // Reset all state values back to original values, then call componentDidMount\n  reset = () => {\n    this.setState({\n      squares: [],\n      torpIndexes: [],\n      shipIndexes: [],\n      torpCounter: 25,\n      hitCounter: 15,\n      sunkShip: false,\n      done: false,\n      missed: false\n    })\n    this.componentDidMount()\n  }\n\n  render(){\n    let squares = this.state.squares.map((value, index) => {\n      return(\n        <Square\n          value = { value }\n          index = { index }\n          key = { index }\n          squares = { this.state.squares }\n          handleClick = { this.handleClick }\n        />\n      )\n    })\n    return(\n      <>\n        <div id=\"body\">\n          <h1>Battleship</h1>\n          <div id=\"message\">\n            <Messages\n              hitCounter = { this.state.hitCounter}\n              torpCounter = { this.state.torpCounter }\n              sunkShip = { this.state.sunkShip}\n              missed = { this.state.missed }\n            />\n          </div>\n          <div id=\"board\">\n            { squares }\n          </div>\n          <div>\n            <p id=\"stats\">Torpedoes left: <span className={this.state.torpCounter < 6 ? \"warningFont\" : \"regularFont\"}>{ this.state.torpCounter }</span><br/>Battleships to destroy: { this.state.hitCounter }</p>\n            <button id=\"reset\" onClick = { this.reset }>Restart</button>\n            <p id=\"footer\">Developed by Jeremy, Ruben + April</p>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}